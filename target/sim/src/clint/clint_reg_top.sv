// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module clint_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 16
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output clint_reg_pkg::clint_reg2hw_t reg2hw,  // Write
    input clint_reg_pkg::clint_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import clint_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic               reg_we;
  logic               reg_re;
  logic [BlockAw-1:0] reg_addr;
  logic [     DW-1:0] reg_wdata;
  logic [    DBW-1:0] reg_be;
  logic [     DW-1:0] reg_rdata;
  logic               reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic msip_p_0_qs;
  logic msip_p_0_wd;
  logic msip_p_0_we;
  logic msip_p_1_qs;
  logic msip_p_1_wd;
  logic msip_p_1_we;
  logic msip_p_2_qs;
  logic msip_p_2_wd;
  logic msip_p_2_we;
  logic msip_p_3_qs;
  logic msip_p_3_wd;
  logic msip_p_3_we;
  logic msip_p_4_qs;
  logic msip_p_4_wd;
  logic msip_p_4_we;
  logic msip_p_5_qs;
  logic msip_p_5_wd;
  logic msip_p_5_we;
  logic msip_p_6_qs;
  logic msip_p_6_wd;
  logic msip_p_6_we;
  logic msip_p_7_qs;
  logic msip_p_7_wd;
  logic msip_p_7_we;
  logic msip_p_8_qs;
  logic msip_p_8_wd;
  logic msip_p_8_we;
  logic msip_p_9_qs;
  logic msip_p_9_wd;
  logic msip_p_9_we;
  logic [31:0] mtimecmp_low0_qs;
  logic [31:0] mtimecmp_low0_wd;
  logic mtimecmp_low0_we;
  logic [31:0] mtimecmp_high0_qs;
  logic [31:0] mtimecmp_high0_wd;
  logic mtimecmp_high0_we;
  logic [31:0] mtimecmp_low1_qs;
  logic [31:0] mtimecmp_low1_wd;
  logic mtimecmp_low1_we;
  logic [31:0] mtimecmp_high1_qs;
  logic [31:0] mtimecmp_high1_wd;
  logic mtimecmp_high1_we;
  logic [31:0] mtimecmp_low2_qs;
  logic [31:0] mtimecmp_low2_wd;
  logic mtimecmp_low2_we;
  logic [31:0] mtimecmp_high2_qs;
  logic [31:0] mtimecmp_high2_wd;
  logic mtimecmp_high2_we;
  logic [31:0] mtimecmp_low3_qs;
  logic [31:0] mtimecmp_low3_wd;
  logic mtimecmp_low3_we;
  logic [31:0] mtimecmp_high3_qs;
  logic [31:0] mtimecmp_high3_wd;
  logic mtimecmp_high3_we;
  logic [31:0] mtimecmp_low4_qs;
  logic [31:0] mtimecmp_low4_wd;
  logic mtimecmp_low4_we;
  logic [31:0] mtimecmp_high4_qs;
  logic [31:0] mtimecmp_high4_wd;
  logic mtimecmp_high4_we;
  logic [31:0] mtimecmp_low5_qs;
  logic [31:0] mtimecmp_low5_wd;
  logic mtimecmp_low5_we;
  logic [31:0] mtimecmp_high5_qs;
  logic [31:0] mtimecmp_high5_wd;
  logic mtimecmp_high5_we;
  logic [31:0] mtimecmp_low6_qs;
  logic [31:0] mtimecmp_low6_wd;
  logic mtimecmp_low6_we;
  logic [31:0] mtimecmp_high6_qs;
  logic [31:0] mtimecmp_high6_wd;
  logic mtimecmp_high6_we;
  logic [31:0] mtimecmp_low7_qs;
  logic [31:0] mtimecmp_low7_wd;
  logic mtimecmp_low7_we;
  logic [31:0] mtimecmp_high7_qs;
  logic [31:0] mtimecmp_high7_wd;
  logic mtimecmp_high7_we;
  logic [31:0] mtimecmp_low8_qs;
  logic [31:0] mtimecmp_low8_wd;
  logic mtimecmp_low8_we;
  logic [31:0] mtimecmp_high8_qs;
  logic [31:0] mtimecmp_high8_wd;
  logic mtimecmp_high8_we;
  logic [31:0] mtimecmp_low9_qs;
  logic [31:0] mtimecmp_low9_wd;
  logic mtimecmp_low9_we;
  logic [31:0] mtimecmp_high9_qs;
  logic [31:0] mtimecmp_high9_wd;
  logic mtimecmp_high9_we;
  logic [31:0] mtime_low_qs;
  logic [31:0] mtime_low_wd;
  logic mtime_low_we;
  logic [31:0] mtime_high_qs;
  logic [31:0] mtime_high_wd;
  logic mtime_high_we;

  // Register instances

  // Subregister 0 of Multireg msip
  // R[msip]: V(False)

  // F[p_0]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_0_we),
      .wd(msip_p_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[0].q),

      // to register interface (read)
      .qs(msip_p_0_qs)
  );


  // F[p_1]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_1_we),
      .wd(msip_p_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[1].q),

      // to register interface (read)
      .qs(msip_p_1_qs)
  );


  // F[p_2]: 2:2
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_2_we),
      .wd(msip_p_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[2].q),

      // to register interface (read)
      .qs(msip_p_2_qs)
  );


  // F[p_3]: 3:3
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_3_we),
      .wd(msip_p_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[3].q),

      // to register interface (read)
      .qs(msip_p_3_qs)
  );


  // F[p_4]: 4:4
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_4_we),
      .wd(msip_p_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[4].q),

      // to register interface (read)
      .qs(msip_p_4_qs)
  );


  // F[p_5]: 5:5
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_5_we),
      .wd(msip_p_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[5].q),

      // to register interface (read)
      .qs(msip_p_5_qs)
  );


  // F[p_6]: 6:6
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_6_we),
      .wd(msip_p_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[6].q),

      // to register interface (read)
      .qs(msip_p_6_qs)
  );


  // F[p_7]: 7:7
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_7_we),
      .wd(msip_p_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[7].q),

      // to register interface (read)
      .qs(msip_p_7_qs)
  );


  // F[p_8]: 8:8
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_8_we),
      .wd(msip_p_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[8].q),

      // to register interface (read)
      .qs(msip_p_8_qs)
  );


  // F[p_9]: 9:9
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_msip_p_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(msip_p_9_we),
      .wd(msip_p_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.msip[9].q),

      // to register interface (read)
      .qs(msip_p_9_qs)
  );



  // R[mtimecmp_low0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low0_we),
      .wd(mtimecmp_low0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low0.q),

      // to register interface (read)
      .qs(mtimecmp_low0_qs)
  );


  // R[mtimecmp_high0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high0_we),
      .wd(mtimecmp_high0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high0.q),

      // to register interface (read)
      .qs(mtimecmp_high0_qs)
  );


  // R[mtimecmp_low1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low1_we),
      .wd(mtimecmp_low1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low1.q),

      // to register interface (read)
      .qs(mtimecmp_low1_qs)
  );


  // R[mtimecmp_high1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high1_we),
      .wd(mtimecmp_high1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high1.q),

      // to register interface (read)
      .qs(mtimecmp_high1_qs)
  );


  // R[mtimecmp_low2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low2_we),
      .wd(mtimecmp_low2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low2.q),

      // to register interface (read)
      .qs(mtimecmp_low2_qs)
  );


  // R[mtimecmp_high2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high2_we),
      .wd(mtimecmp_high2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high2.q),

      // to register interface (read)
      .qs(mtimecmp_high2_qs)
  );


  // R[mtimecmp_low3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low3_we),
      .wd(mtimecmp_low3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low3.q),

      // to register interface (read)
      .qs(mtimecmp_low3_qs)
  );


  // R[mtimecmp_high3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high3_we),
      .wd(mtimecmp_high3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high3.q),

      // to register interface (read)
      .qs(mtimecmp_high3_qs)
  );


  // R[mtimecmp_low4]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low4_we),
      .wd(mtimecmp_low4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low4.q),

      // to register interface (read)
      .qs(mtimecmp_low4_qs)
  );


  // R[mtimecmp_high4]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high4_we),
      .wd(mtimecmp_high4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high4.q),

      // to register interface (read)
      .qs(mtimecmp_high4_qs)
  );


  // R[mtimecmp_low5]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low5_we),
      .wd(mtimecmp_low5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low5.q),

      // to register interface (read)
      .qs(mtimecmp_low5_qs)
  );


  // R[mtimecmp_high5]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high5_we),
      .wd(mtimecmp_high5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high5.q),

      // to register interface (read)
      .qs(mtimecmp_high5_qs)
  );


  // R[mtimecmp_low6]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low6_we),
      .wd(mtimecmp_low6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low6.q),

      // to register interface (read)
      .qs(mtimecmp_low6_qs)
  );


  // R[mtimecmp_high6]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high6_we),
      .wd(mtimecmp_high6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high6.q),

      // to register interface (read)
      .qs(mtimecmp_high6_qs)
  );


  // R[mtimecmp_low7]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low7_we),
      .wd(mtimecmp_low7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low7.q),

      // to register interface (read)
      .qs(mtimecmp_low7_qs)
  );


  // R[mtimecmp_high7]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high7_we),
      .wd(mtimecmp_high7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high7.q),

      // to register interface (read)
      .qs(mtimecmp_high7_qs)
  );


  // R[mtimecmp_low8]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low8_we),
      .wd(mtimecmp_low8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low8.q),

      // to register interface (read)
      .qs(mtimecmp_low8_qs)
  );


  // R[mtimecmp_high8]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high8_we),
      .wd(mtimecmp_high8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high8.q),

      // to register interface (read)
      .qs(mtimecmp_high8_qs)
  );


  // R[mtimecmp_low9]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_low9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_low9_we),
      .wd(mtimecmp_low9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_low9.q),

      // to register interface (read)
      .qs(mtimecmp_low9_qs)
  );


  // R[mtimecmp_high9]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtimecmp_high9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtimecmp_high9_we),
      .wd(mtimecmp_high9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtimecmp_high9.q),

      // to register interface (read)
      .qs(mtimecmp_high9_qs)
  );


  // R[mtime_low]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtime_low (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtime_low_we),
      .wd(mtime_low_wd),

      // from internal hardware
      .de(hw2reg.mtime_low.de),
      .d (hw2reg.mtime_low.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtime_low.q),

      // to register interface (read)
      .qs(mtime_low_qs)
  );


  // R[mtime_high]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_mtime_high (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(mtime_high_we),
      .wd(mtime_high_wd),

      // from internal hardware
      .de(hw2reg.mtime_high.de),
      .d (hw2reg.mtime_high.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.mtime_high.q),

      // to register interface (read)
      .qs(mtime_high_qs)
  );




  logic [22:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == CLINT_MSIP_OFFSET);
    addr_hit[1] = (reg_addr == CLINT_MTIMECMP_LOW0_OFFSET);
    addr_hit[2] = (reg_addr == CLINT_MTIMECMP_HIGH0_OFFSET);
    addr_hit[3] = (reg_addr == CLINT_MTIMECMP_LOW1_OFFSET);
    addr_hit[4] = (reg_addr == CLINT_MTIMECMP_HIGH1_OFFSET);
    addr_hit[5] = (reg_addr == CLINT_MTIMECMP_LOW2_OFFSET);
    addr_hit[6] = (reg_addr == CLINT_MTIMECMP_HIGH2_OFFSET);
    addr_hit[7] = (reg_addr == CLINT_MTIMECMP_LOW3_OFFSET);
    addr_hit[8] = (reg_addr == CLINT_MTIMECMP_HIGH3_OFFSET);
    addr_hit[9] = (reg_addr == CLINT_MTIMECMP_LOW4_OFFSET);
    addr_hit[10] = (reg_addr == CLINT_MTIMECMP_HIGH4_OFFSET);
    addr_hit[11] = (reg_addr == CLINT_MTIMECMP_LOW5_OFFSET);
    addr_hit[12] = (reg_addr == CLINT_MTIMECMP_HIGH5_OFFSET);
    addr_hit[13] = (reg_addr == CLINT_MTIMECMP_LOW6_OFFSET);
    addr_hit[14] = (reg_addr == CLINT_MTIMECMP_HIGH6_OFFSET);
    addr_hit[15] = (reg_addr == CLINT_MTIMECMP_LOW7_OFFSET);
    addr_hit[16] = (reg_addr == CLINT_MTIMECMP_HIGH7_OFFSET);
    addr_hit[17] = (reg_addr == CLINT_MTIMECMP_LOW8_OFFSET);
    addr_hit[18] = (reg_addr == CLINT_MTIMECMP_HIGH8_OFFSET);
    addr_hit[19] = (reg_addr == CLINT_MTIMECMP_LOW9_OFFSET);
    addr_hit[20] = (reg_addr == CLINT_MTIMECMP_HIGH9_OFFSET);
    addr_hit[21] = (reg_addr == CLINT_MTIME_LOW_OFFSET);
    addr_hit[22] = (reg_addr == CLINT_MTIME_HIGH_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CLINT_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CLINT_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CLINT_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CLINT_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CLINT_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CLINT_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CLINT_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CLINT_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CLINT_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CLINT_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CLINT_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(CLINT_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(CLINT_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(CLINT_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(CLINT_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(CLINT_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(CLINT_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(CLINT_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(CLINT_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(CLINT_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(CLINT_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(CLINT_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(CLINT_PERMIT[22] & ~reg_be)))));
  end

  assign msip_p_0_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_0_wd = reg_wdata[0];

  assign msip_p_1_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_1_wd = reg_wdata[1];

  assign msip_p_2_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_2_wd = reg_wdata[2];

  assign msip_p_3_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_3_wd = reg_wdata[3];

  assign msip_p_4_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_4_wd = reg_wdata[4];

  assign msip_p_5_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_5_wd = reg_wdata[5];

  assign msip_p_6_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_6_wd = reg_wdata[6];

  assign msip_p_7_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_7_wd = reg_wdata[7];

  assign msip_p_8_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_8_wd = reg_wdata[8];

  assign msip_p_9_we = addr_hit[0] & reg_we & !reg_error;
  assign msip_p_9_wd = reg_wdata[9];

  assign mtimecmp_low0_we = addr_hit[1] & reg_we & !reg_error;
  assign mtimecmp_low0_wd = reg_wdata[31:0];

  assign mtimecmp_high0_we = addr_hit[2] & reg_we & !reg_error;
  assign mtimecmp_high0_wd = reg_wdata[31:0];

  assign mtimecmp_low1_we = addr_hit[3] & reg_we & !reg_error;
  assign mtimecmp_low1_wd = reg_wdata[31:0];

  assign mtimecmp_high1_we = addr_hit[4] & reg_we & !reg_error;
  assign mtimecmp_high1_wd = reg_wdata[31:0];

  assign mtimecmp_low2_we = addr_hit[5] & reg_we & !reg_error;
  assign mtimecmp_low2_wd = reg_wdata[31:0];

  assign mtimecmp_high2_we = addr_hit[6] & reg_we & !reg_error;
  assign mtimecmp_high2_wd = reg_wdata[31:0];

  assign mtimecmp_low3_we = addr_hit[7] & reg_we & !reg_error;
  assign mtimecmp_low3_wd = reg_wdata[31:0];

  assign mtimecmp_high3_we = addr_hit[8] & reg_we & !reg_error;
  assign mtimecmp_high3_wd = reg_wdata[31:0];

  assign mtimecmp_low4_we = addr_hit[9] & reg_we & !reg_error;
  assign mtimecmp_low4_wd = reg_wdata[31:0];

  assign mtimecmp_high4_we = addr_hit[10] & reg_we & !reg_error;
  assign mtimecmp_high4_wd = reg_wdata[31:0];

  assign mtimecmp_low5_we = addr_hit[11] & reg_we & !reg_error;
  assign mtimecmp_low5_wd = reg_wdata[31:0];

  assign mtimecmp_high5_we = addr_hit[12] & reg_we & !reg_error;
  assign mtimecmp_high5_wd = reg_wdata[31:0];

  assign mtimecmp_low6_we = addr_hit[13] & reg_we & !reg_error;
  assign mtimecmp_low6_wd = reg_wdata[31:0];

  assign mtimecmp_high6_we = addr_hit[14] & reg_we & !reg_error;
  assign mtimecmp_high6_wd = reg_wdata[31:0];

  assign mtimecmp_low7_we = addr_hit[15] & reg_we & !reg_error;
  assign mtimecmp_low7_wd = reg_wdata[31:0];

  assign mtimecmp_high7_we = addr_hit[16] & reg_we & !reg_error;
  assign mtimecmp_high7_wd = reg_wdata[31:0];

  assign mtimecmp_low8_we = addr_hit[17] & reg_we & !reg_error;
  assign mtimecmp_low8_wd = reg_wdata[31:0];

  assign mtimecmp_high8_we = addr_hit[18] & reg_we & !reg_error;
  assign mtimecmp_high8_wd = reg_wdata[31:0];

  assign mtimecmp_low9_we = addr_hit[19] & reg_we & !reg_error;
  assign mtimecmp_low9_wd = reg_wdata[31:0];

  assign mtimecmp_high9_we = addr_hit[20] & reg_we & !reg_error;
  assign mtimecmp_high9_wd = reg_wdata[31:0];

  assign mtime_low_we = addr_hit[21] & reg_we & !reg_error;
  assign mtime_low_wd = reg_wdata[31:0];

  assign mtime_high_we = addr_hit[22] & reg_we & !reg_error;
  assign mtime_high_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = msip_p_0_qs;
        reg_rdata_next[1] = msip_p_1_qs;
        reg_rdata_next[2] = msip_p_2_qs;
        reg_rdata_next[3] = msip_p_3_qs;
        reg_rdata_next[4] = msip_p_4_qs;
        reg_rdata_next[5] = msip_p_5_qs;
        reg_rdata_next[6] = msip_p_6_qs;
        reg_rdata_next[7] = msip_p_7_qs;
        reg_rdata_next[8] = msip_p_8_qs;
        reg_rdata_next[9] = msip_p_9_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = mtimecmp_low0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = mtimecmp_high0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = mtimecmp_low1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = mtimecmp_high1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = mtimecmp_low2_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = mtimecmp_high2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = mtimecmp_low3_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = mtimecmp_high3_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = mtimecmp_low4_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = mtimecmp_high4_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = mtimecmp_low5_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = mtimecmp_high5_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = mtimecmp_low6_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = mtimecmp_high6_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = mtimecmp_low7_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = mtimecmp_high7_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = mtimecmp_low8_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = mtimecmp_high8_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = mtimecmp_low9_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = mtimecmp_high9_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = mtime_low_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = mtime_high_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module clint_reg_top_intf #(
    parameter  int AW = 16,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output clint_reg_pkg::clint_reg2hw_t reg2hw,  // Write
    input clint_reg_pkg::clint_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  clint_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


